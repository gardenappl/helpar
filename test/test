#!/bin/sh

set -o errexit


if [ "$1" = '--allow-skip' ] || [ "$2" == '--allow-skip' ]; then
	allow_skip=y
fi

if [ "$1" = '--all-tools' ] || [ "$2" == '--all-tools' ]; then
	test_all_tools=y
fi

get_abs_filename() {
	# $1 relative filename
	echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

TEMPDIR="$(mktemp -d)"
trap 'rm -r "$TEMPDIR"' EXIT


HELPAR="$(get_abs_filename ../helpar)"
TEST_RAR="$(get_abs_filename test.rar)"
TEST_ARJ="$(get_abs_filename test.arj)"
TEST_LHA="$(get_abs_filename test.lha)"


cd "$TEMPDIR"

printf 'testfile\ntestfile 2\n' > expected_output


test_ls() {
	run="$HELPAR ls --yes --tool=$2"
	file="$1"

	# Prepare
	if [ "$test_oneline" = y ]; then run="$run -1"; fi

	if [ "$test_dash" = y ]; then
		mv -- "$file" "-dash$file"
		file="-dash$file"
		
		run="$run -- $file"
	else
		run="$run $file"
	fi

	# Run
	echo "Running: $run"
	( eval "$run" ) > output

	# Assert
	if [ "$test_oneline" = y ]; then
		if [ "$format_single" = y ]; then
			if [ "$(cat output)" != 'testfile' ] && [ "$(cat output)" != "$(basename -- "$file" "$format_string")" ]; then
				echo "Bad output:"
				cat output
				echo "Wanted: $(basename -- "$file" "$format_string") or 'testfile'"
				exit 1
			fi
		else
			if ! cmp output expected_output; then
				cat output expected_output
				exit 1
			fi
		fi
	else
		if ! grep --silent 'testfile' < output; then
			echo "Output does not contain 'testfile'"
			exit 1
		fi
	fi

	# Cleanup
	if [ "$test_dash" = y ]; then
		mv -- "-dash$1" "$1"
	fi
}

test_suite_ls() {
	echo
	for test_oneline in n y; do
		if [ -n "$_hack_skip_test_oneline" ] && [ "$test_oneline" = y ]; then
			printf '\n=====\nSKIPPING --oneline tests for %s\n=====\n\n' "$format_string"
			continue
		fi
		for test_dash in n y; do
			printf 'Dash: %s, oneline: %s\n' "$test_dash" "$test_oneline"
			test_ls "$1" "$2"
		done
	done
}

test_extract() {
	run="$HELPAR extract --yes --tool=$2"
	file="$1"

	# Prepare
	if [ "$test_delete" = y ]; then run="$run --delete"; fi

	if [ "$test_output_dir" = y ]; then
		if [ "$test_input" = 'dash' ]; then
			output_dir="-dash-output-dir"
			run="$run --output-directory=$output_dir"
		else
			output_dir="output-dir"
			run="$run --output-directory=$output_dir"
		fi
	fi

	if [ "$test_input" = 'dir' ]; then
		mkdir input-dir
		cp "$file" input-dir
		file="input-dir/$file"
	elif [ "$test_input" = 'injection' ]; then
		cp -- "$file" "${file};false;#$file"
		file="${file};false;#$file"
	elif [ "$test_input" = 'dash' ]; then
		cp -- "$file" "-dash$file"
		file="-dash$file"
	fi
	
	if [ "$format_single" = y ]; then
		# Archive path may have changed, let's figure out the new name
		# for output file
		extract_testfile="$("$HELPAR" ls -r1 -- "$file")"
	else
		extract_testfile='testfile'
	fi
	extract_testfile_alt='testfile'
	if [ "$test_output_dir" = y ]; then
		extract_testfile="$output_dir/$extract_testfile"
		extract_testfile_alt="$output_dir/$extract_testfile_alt"
	fi

	if [ "$test_force" = 'skip' ]; then
		if [ "$test_output_dir" = y ]; then mkdir -- "$output_dir"; fi
		echo 'This should be skipped.' > "$extract_testfile"
		run="$run --skip"
	elif [ "$test_force" = 'overwrite' ]; then
		if [ "$test_output_dir" = y ]; then mkdir -- "$output_dir"; fi
		echo 'This should be overwritten.' > "$extract_testfile"
		run="$run --force"
	fi

	if [ "$test_input" = 'dash' ]; then
		run="$run -- $file"
	elif [ "$test_input" = 'injection' ]; then
		run="$run '$file'"
	else
		run="$run $file"
	fi

	# Run
	echo "Running: $run"
	( eval "$run" )

	# Assert
	if [ "$test_delete" = y ] && [ -e "$file" ]; then
		echo "Archive was not deleted."
		exit 1
	elif [ "$test_delete" = n ] && [ ! -e "$file" ]; then
		echo "Archive was deleted."
		exit 1
	fi

	if [ "$format_single" = n ]; then
		if [ "$test_output_dir" = y ]; then cd -- "$output_dir"; fi

		if [ "$test_force" = 'skip' ]; then
			if [ "$(cat testfile)" != 'This should be skipped.' ]; then
				echo "File was not skipped."
				exit 1
			fi
		elif [ "$(cat testfile)" != "Test file for $format_string" ]; then
			echo "Wrong file content: $(cat testfile)"
			exit 1
		fi
		if [ "$(cat 'testfile 2')" != "Second test file for $format_string" ]; then
			echo "Wrong file content: $(cat testfile)"
			exit 1
		fi

		if [ "$test_output_dir" = y ]; then cd ..; fi
	else
		# Only one test file, but its name and path might have changed
		if [ "$test_force" = 'skip' ]; then
			if [ "$(cat -- "$extract_testfile")" != 'This should be skipped.' ] && [ "$(cat -- "$extract_testfile_alt")" != 'This should be skipped.' ]; then
				echo "File was not skipped."
				exit 1
			fi
		elif [ "$(cat -- "$extract_testfile")" != "Test file for $format_string" ] && [ "$(cat -- "$extract_testfile_alt")" != "Test file for $format_string" ]; then
			echo "Wrong file content: $(cat testfile)"
			exit 1
		fi
	fi
}

test_suite_extract() {
	for test_force in n skip overwrite; do
		if [ "$test_force" = 'overwrite' ] && [ -n "$_hack_skip_test_force" ]; then
			printf '\n=====\nSKIPPING --force tests for %s\n=====\n\n' "$format_string"
			continue
		elif [ "$test_force" = 'skip' ] && [ -n "$_hack_skip_test_skip" ]; then
			printf '\n=====\nSKIPPING --skip tests for %s\n=====\n\n' "$format_string"
			continue
		fi
		for test_input in n dir dash injection; do
			for test_output_dir in n y; do
				if [ "$test_output_dir" = y ] && [ -n "$_hack_skip_test_output_dir" ]; then
					printf '\n=====\nSKIPPING --output-directory tests for %s\n=====\n\n' "$format_string"
					continue
				elif [ "$test_force" != 'overwrite' ] && [ "$test_output_dir" = n ] && [ -n "$_hack_skip_test_output_dir_no_force" ]; then
					printf '\n=====\nSKIPPING tests without --force and --output-directory for %s\n=====\n\n' "$format_string"
					continue
				fi
				for test_delete in n y; do
					mkdir test
					cp "$1" test/
					cd test

					printf '\n'
					echo "Force: $test_force, input: $test_input, output dir: $test_output_dir, delete: $test_delete"
					test_extract "$1" "$2"

					cd ..
					rm -r test
				done
			done
		done
	done
}

prepare_input() {
	echo "Testing $1..."
	echo "Test file for $1" > testfile
	if [ "$format_single" = n ]; then
		echo "Second test file for $1" > testfile\ 2
	fi
}

run_test_suites() {
	ls_tools="$("$HELPAR" ls --tools "$1")"
	for ls_tool in $ls_tools; do
		if command -v "$ls_tool"; then
			test_suite_ls "$1" "$ls_tool"
		else
			skipped=y
			skipped_list="$skipped_list $ls_tool"
			echo "Skipping $ls_tool: tool not available."
		fi

		# Fallback tools (bsdtar, 7z, ...) should work for all cases
		# so all _hack_s are unset at first iteration
		unset _hack_skip_test_oneline

		[ -z "$test_all_tools" ] && break
		echo
		echo
		echo
		echo
		echo
		echo "DONE WITH ls: $ls_tool"
		echo
		echo
		echo
		echo
		echo
	done

	extract_tools="$("$HELPAR" extract --tools "$1")"
	for extract_tool in $extract_tools; do
		if command -v "$extract_tool" && ( [ -z "$_hack_require_terminal" ] || [ -t 1 ] ); then
			test_suite_extract "$1" "$extract_tool"
		else
			skipped=y
			skipped_list="$skipped_list $extract_tool (might require output to terminal)"
			if [ -n "$_hack_require_terminal" ]; then
				echo "Skipping $extract_tool: tool not available or it requires output to terminal."
			else
				echo "Skipping $extract_tool: tool not available."
			fi
		fi

		# Fallback tools (bsdtar, 7z, ...) should work for all cases
		# so all _hack_s are unset at first iteration
		unset _hack_skip_test_force
		unset _hack_skip_test_output_dir
		unset _hack_skip_test_output_dir_no_force
		unset _hack_skip_test_skip

		[ -z "$test_all_tools" ] && break
		echo
		echo
		echo
		echo
		echo
		echo "DONE WITH extract: $extract_tool"
		echo
		echo
		echo
		echo
		echo
	done
}


format_string="cpio"
format_single=n
prepare_input "$format_string"
printf 'testfile\ntestfile 2' | cpio -o > test.cpio
_hack_skip_test_output_dir=y
run_test_suites test.cpio


format_string=".Z"
format_single=y
prepare_input "$format_string"
compress -f testfile
run_test_suites testfile.Z


format_string="lzop"
format_single=n
prepare_input "$format_string"
lzop -P testfile 'testfile 2' -o test.lzo
_hack_skip_test_skip=y
run_test_suites test.lzo


format_string="LHA"
format_single=n
cp "$TEST_LHA" .
_hack_skip_test_skip=y
run_test_suites test.lha


format_string=".bz2"
format_single=y
prepare_input "$format_string"
bzip2 testfile
run_test_suites testfile.bz2


format_string=".gz"
format_single=y
prepare_input "$format_string"
gzip testfile
run_test_suites testfile.gz


format_string=".xz"
format_single=y
prepare_input "$format_string"
xz testfile
run_test_suites testfile.xz


format_string=".lzma"
format_single=y
prepare_input "$format_string"
lzma testfile
run_test_suites testfile.lzma


format_string=".lz"
format_single=y
prepare_input "$format_string"
lzip testfile
run_test_suites testfile.lz


format_string=".lz4"
format_single=y
# Not a BUG (?), just bad design:
# unlz4 automatically nicely chooses output file name,
# unless stdout is not a terminal, in which case
# the file gets piped into stdout and the script breaks.
prepare_input "$format_string"
lz4 testfile
_hack_require_terminal=y
run_test_suites testfile.lz4


format_string="RAR"
format_single=n
prepare_input "$format_string"
cp "$TEST_RAR" test.rar
run_test_suites test.rar


format_string="ZIP"
format_single=n
prepare_input "$format_string"
zip test.zip testfile testfile\ 2
run_test_suites test.zip


format_string="lrzip with tar"
format_single=n
prepare_input "$format_string"
tar cvf test.tar testfile 'testfile 2'
lrzip test.tar
run_test_suites test.tar.lrz


format_string=".lrz"
format_single=y
prepare_input "$format_string"
lrzip testfile
run_test_suites testfile.lrz


format_string="deb"
format_single=n
prepare_input "$format_string"
mkdir -p testpkg/DEBIAN
mv testfile 'testfile 2' testpkg/
dpkg-deb -b --nocheck testpkg/ test.deb
_hack_skip_test_skip=y
_hack_skip_test_output_dir_no_force=y
run_test_suites test.deb


format_string="ARJ"
format_single=n
cp "$TEST_ARJ" test.arj
_hack_skip_test_oneline=y
_hack_skip_test_output_dir=y
_hack_skip_test_force=y
_hack_skip_test_skip=y
run_test_suites test.arj


format_string="tar"
format_single=n
prepare_input "$format_string"
tar cvf test.tar testfile testfile\ 2
run_test_suites test.tar


format_string="7z"
format_single=n
prepare_input "$format_string"
7z a test.7z testfile testfile\ 2
run_test_suites test.7z


format_string=".zst"
format_single=y
prepare_input "$format_string"
zstd testfile
run_test_suites testfile.zst


if [ -n "$skipped" ]; then
	echo "--------------------"
	if [ -n "$allow_skip" ]; then
		printf "Warning: some tests were skipped due to missing dependencies:\n%s\n" "$skipped_list"
		echo "--------------------"
	else
		printf "Error: some tests were skipped due to missing dependencies:\n%s\n\n" "$skipped_list"
		echo "Install these programs and re-run the test suite, or run it with the --allow-skip option"
		echo "--------------------"
		exit 1
	fi
fi
