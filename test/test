#!/bin/sh

set -o errexit


if [ "$1" = '--allow-skip' ]; then
	allow_skip=y
fi

get_abs_filename() {
	# $1 relative filename
	echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

TEMPDIR="$(mktemp -d)"
trap 'rm -r "$TEMPDIR"' EXIT


HELPAR="$(get_abs_filename ../helpar)"
TEST_RAR="$(get_abs_filename test.rar)"
TEST_ARJ="$(get_abs_filename test.arj)"
TEST_LHA="$(get_abs_filename test.lha)"


cd "$TEMPDIR"

printf 'testfile\ntestfile 2\n' > expected_output


test_lsarchive() {
	run="$HELPAR ls --yes"
	file="$1"

	# Prepare
	if [ "$test_oneline" = y ]; then run="$run -1"; fi

	if [ "$test_dash" = y ]; then
		mv -- "$file" "-dash$file"
		file="-dash$file"
		
		run="$run -- $file"
	else
		run="$run $file"
	fi

	# Run
	( eval "$run" ) > output

	# Assert
	if [ "$test_oneline" = y ]; then
		if [ "$format_single" = y ]; then
			if [ "$(cat output)" != "$(basename -- "$file" "$format")" ]; then
				echo "Bad output:"
				cat output
				echo "Wanted: $(basename -- "$file" "$format")"
				exit 1
			fi
		else
			if ! cmp output expected_output; then
				cat output expected_output
				exit 1
			fi
		fi
	else
		if ! grep --silent 'testfile' < output; then
			echo "Output does not contain 'testfile'"
			exit 1
		fi
	fi

	# Cleanup
	if [ "$test_dash" = y ]; then
		mv -- "-dash$1" "$1"
	fi
}

test_suite_lsarchive() {
	echo
	for test_oneline in n y; do
		if [ -n "$_hack_skip_test_oneline" ] && [ "$test_oneline" = y ]; then
			printf '\n=====\nSKIPPING --oneline tests for %s\n=====\n\n' "$format"
			continue
		fi
		for test_dash in n y; do
			printf 'Dash: %s, oneline: %s\n' "$test_dash" "$test_oneline"
			test_lsarchive "$1"
		done
	done
}

test_extract() {
	run="$HELPAR extract --yes"
	file="$1"

	# Prepare
	if [ "$test_delete" = y ]; then run="$run --delete"; fi

	if [ "$test_output_dir" = y ]; then
		run="$run --output-directory=output-dir"
	fi

	if [ "$test_input" = 'dir' ]; then
		mkdir input-dir
		cp "$file" input-dir
		file="input-dir/$file"
	elif [ "$test_input" = 'injection' ]; then
		cp -- "$file" "${file};false;#$file"
		file="${file};false;#$file"
	elif [ "$test_input" = 'dash' ]; then
		cp -- "$file" "-dash$file"
		file="-dash$file"
	fi
	
	if [ "$format_single" = y ]; then
		# Archive path may have changed, let's figure the new name
		# for output file
		extract_testfile="$("$HELPAR" ls -y1 -- "$file")"
	else
		extract_testfile='testfile'
	fi
	if [ "$test_output_dir" = y ]; then
		extract_testfile="output-dir/$extract_testfile"
	fi

	if [ "$test_force" = 'skip' ]; then
		if [ "$test_output_dir" = y ]; then mkdir output-dir; fi
		echo 'This should be skipped.' > "$extract_testfile"
		run="$run --skip"
	elif [ "$test_force" = 'overwrite' ]; then
		if [ "$test_output_dir" = y ]; then mkdir output-dir; fi
		echo 'This should be overwritten.' > "$extract_testfile"
		run="$run --force"
	fi

	if [ "$test_input" = 'dash' ]; then
		run="$run -- $file"
	elif [ "$test_input" = 'injection' ]; then
		run="$run '$file'"
	else
		run="$run $file"
	fi

	# Run
	( eval "$run" )

	# Assert
	if [ "$test_delete" = y ] && [ -e "$file" ]; then
		echo "Archive was not deleted."
		exit 1
	elif [ "$test_delete" = n ] && [ ! -e "$file" ]; then
		echo "Archive was deleted."
		exit 1
	fi

	if [ "$format_single" = n ]; then
		if [ "$test_output_dir" = y ]; then cd output-dir; fi

		if [ "$test_force" = 'skip' ]; then
			if [ "$(cat testfile)" != 'This should be skipped.' ]; then
				echo "File was not skipped."
				exit 1
			fi
		elif [ "$(cat testfile)" != "Test file for $format" ]; then
			echo "Wrong file content: $(cat testfile)"
			exit 1
		fi
		if [ "$(cat 'testfile 2')" != "Second test file for $format" ]; then
			echo "Wrong file content: $(cat testfile)"
			exit 1
		fi

		if [ "$test_output_dir" = y ]; then cd ..; fi
	else
		# Only one test file, but its name and path might have changed
		if [ "$test_force" = 'skip' ]; then
			if [ "$(cat -- "$extract_testfile")" != 'This should be skipped.' ]; then
				echo "File was not skipped."
				exit 1
			fi
		elif [ "$(cat -- "$extract_testfile")" != "Test file for $format" ]; then
			echo "Wrong file content: $(cat testfile)"
			exit 1
		fi
	fi
}

test_suite_extract() {
	for test_force in n skip overwrite; do
		if [ "$test_force" = 'overwrite' ] && [ -n "$_hack_skip_test_force" ]; then
			printf '\n=====\nSKIPPING --force tests for %s\n=====\n\n' "$format"
			continue
		elif [ "$test_force" = 'skip' ] && [ -n "$_hack_skip_test_skip" ]; then
			printf '\n=====\nSKIPPING --skip tests for %s\n=====\n\n' "$format"
			continue
		fi
		for test_input in n dir dash injection; do
			for test_output_dir in n y; do
				if [ "$test_output_dir" = y ] && [ -n "$_hack_skip_test_output_dir" ]; then
					printf '\n=====\nSKIPPING --output-directory tests for %s\n=====\n\n' "$format"
					continue
				elif [ "$test_force" != 'overwrite' ] && [ "$test_output_dir" = n ] && [ -n "$_hack_skip_test_output_dir_no_force" ]; then
					printf '\n=====\nSKIPPING tests without --force and --output-directory for %s\n=====\n\n' "$format"
					continue
				fi
				for test_delete in n y; do
					mkdir test
					cp "$1" test/
					cd test

					printf '\n'
					echo "Force: $test_force, input: $test_input, output dir: $test_output_dir, delete: $test_delete"
					test_extract "$1"

					cd ..
					rm -r test
				done
			done
		done
	done
}

prepare_format() {
	echo "Testing $1..."
	echo "Test file for $1" > testfile
	if [ "$format_single" = n ]; then
		echo "Second test file for $1" > testfile\ 2
	fi
}


format="deb"
format_single=n
if command -v dpkg-deb; then
	prepare_format "$format"
	mkdir -p testpkg/DEBIAN
	mv testfile 'testfile 2' testpkg/
	dpkg-deb -b --nocheck testpkg/ test.deb

	test_suite_lsarchive test.deb

	_hack_skip_test_skip=y
	_hack_skip_test_output_dir_no_force=y
	test_suite_extract test.deb
	unset _hack_skip_test_output_dir_no_force
	unset _hack_skip_test_skip
else
	skipped=y
	skipped_list="$skipped_list dpkg-deb"
	echo "Skipping: dpkg-deb not available."
fi


format="LHA"
format_single=n
if command -v lha; then
	prepare_format "$format"
	cp "$TEST_LHA" .

	test_suite_lsarchive test.lha

	_hack_skip_test_skip=y
	test_suite_extract test.lha
	unset _hack_skip_test_skip
else
	skipped=y
	skipped_list="$skipped_list lha"
	echo "Skipping: lha not available."
fi



format="cpio"
format_single=n
if command -v cpio; then
	prepare_format "$format"
	printf 'testfile\ntestfile 2' | cpio -o > test.cpio

	test_suite_lsarchive test.cpio

	_hack_skip_test_output_dir=y
	test_suite_extract test.cpio
	unset _hack_skip_test_output_dir
else
	skipped=y
	skipped_list="$skipped_list cpio"
	echo "Skipping: cpio not available."
fi


format="ARJ"
format_single=n
if command -v unarj; then
	prepare_format "$format"
	cp "$TEST_ARJ" test.arj

	_hack_skip_test_oneline=y
	test_suite_lsarchive test.arj
	unset _hack_skip_test_oneline

	_hack_skip_test_output_dir=y
	_hack_skip_test_force=y
	_hack_skip_test_skip=y
	test_suite_extract test.arj
	unset _hack_skip_test_skip
	unset _hack_skip_test_force
	unset _hack_skip_test_output_dir
else
	skipped=y
	skipped_list="$skipped_list unarj"
	echo "Skipping: unarj not available."
fi


format=".lz4"
format_single=y
# Not a BUG but bad design:
# unlz4 automatically nicely chooses output file name,
# unless stdout is not a terminal, in which case
# the file gets piped into stdout and the script breaks.
if [ -t 1 ]; then
	if command -v lz4; then
		prepare_format "$format"
		lz4 testfile

		test_suite_lsarchive testfile.lz4

		test_suite_extract testfile.lz4
	else
		skipped=y
		skipped_list="$skipped_list lz4"
		echo "Skipping: lz4 not available."
	fi
else
	skipped=y
	skipped_list="$skipped_list lz4 (is available but does not work when output is not a terminal)"
	if command -v lz4; then
		echo "Skipping: lz4 is available but output is not a terminal."
	else
		echo "Skipping: lz4 not available and output is not a terminal."
	fi
fi


if command -v lrzip; then
	# .tar.lrz is a special case
	format="lrzip with tar"
	format_single=n
	prepare_format "$format"
	tar cvf test.tar testfile 'testfile 2'
	lrzip test.tar

	test_suite_lsarchive test.tar.lrz

	test_suite_extract test.tar.lrz


	format=".lrz"
	format_single=y
	prepare_format "$format"
	lrzip testfile

	test_suite_lsarchive testfile.lrz

	test_suite_extract testfile.lrz
else
	skipped=y
	skipped_list="$skipped_list lrzip"
	echo "Skipping: lrzip not available."
fi


format="ZIP"
format_single=n
if command -v zip; then
	prepare_format "$format"
	zip test.zip testfile testfile\ 2

	test_suite_lsarchive test.zip

	test_suite_extract test.zip
else
	skipped=y
	skipped_list="$skipped_list zip"
	echo "Skipping: zip not available."
fi


format="RAR"
format_single=n
if command -v unrar; then
	prepare_format "$format"
	cp "$TEST_RAR" test.rar

	test_suite_lsarchive test.rar

	test_suite_extract test.rar
else
	skipped=y
	skipped_list="$skipped_list unrar"
	echo "Skipping: unrar not available."
fi


format="tar"
format_single=n
prepare_format "$format"
tar cvf test.tar testfile testfile\ 2

test_suite_lsarchive test.tar

test_suite_extract test.tar


format="7z"
format_single=n
if command -v 7z; then
	prepare_format "$format"
	7z a test.7z testfile testfile\ 2

	test_suite_lsarchive test.7z

	test_suite_extract test.7z
else
	skipped=y
	skipped_list="$skipped_list 7z"
	echo "Skipping: 7z not available."
fi


format=".bz2"
format_single=y
if command -v bzip2; then
	prepare_format "$format"
	bzip2 testfile

	test_suite_lsarchive testfile.bz2

	test_suite_extract testfile.bz2
else
	skipped=y
	skipped_list="$skipped_list bzip2"
	echo "Skipping: bzip2 not available."
fi


format=".gz"
format_single=y
if command -v gzip; then
	prepare_format "$format"
	gzip testfile

	test_suite_lsarchive testfile.gz

	test_suite_extract testfile.gz
else
	skipped=y
	skipped_list="$skipped_list gzip"
	echo "Skipping: gzip not available."
fi


format=".xz"
format_single=y
if command -v xz; then
	prepare_format "$format"
	xz testfile

	test_suite_lsarchive testfile.xz

	test_suite_extract testfile.xz
else
	skipped=y
	skipped_list="$skipped_list xz"
	echo "Skipping: xz not available."
fi


format=".lzma"
format_single=y
if command -v lzma; then
	prepare_format "$format"
	lzma testfile

	test_suite_lsarchive testfile.lzma

	test_suite_extract testfile.lzma
else
	skipped=y
	skipped_list="$skipped_list lzma"
	echo "Skipping: lzma not available."
fi


format=".lz"
format_single=y
if command -v lzip; then
	prepare_format "$format"
	lzip testfile

	test_suite_lsarchive testfile.lz

	test_suite_extract testfile.lz
else
	skipped=y
	skipped_list="$skipped_list lzop"
	echo "Skipping: lzip not available."
fi


format=".Z"
format_single=y
if command -v gzip && command -v uncompress; then
	prepare_format "$format"
	gzip testfile -S .Z

	test_suite_lsarchive testfile.Z

	test_suite_extract testfile.Z
else
	skipped=y
	skipped_list="$skipped_list gzip (and/or) uncompress"
	echo "Skipping: gzip and uncompress not available."
fi


format="lzop"
format_single=n
if command -v lzop; then
	prepare_format "$format"
	lzop -P testfile 'testfile 2' -o test.lzo

	test_suite_lsarchive test.lzo

	_hack_skip_test_skip=y
	test_suite_extract test.lzo
	unset _hack_skip_test_skip
else
	skipped=y
	skipped_list="$skipped_list lzop"
	echo "Skipping: lzop not available."
fi


format=".zst"
format_single=y
if command -v zstd; then
	prepare_format "$format"
	zstd testfile

	test_suite_lsarchive testfile.zst

	test_suite_extract testfile.zst
else
	skipped=y
	skipped_list="$skipped_list zstd"
	echo "Skipping: zstd not available."
fi


if [ -n "$skipped" ]; then
	echo "--------------------"
	if [ -n "$allow_skip" ]; then
		printf "Warning: some tests were skipped due to missing dependencies:\n%s\n" "$skipped_list"
		echo "--------------------"
	else
		printf "Error: some tests were skipped due to missing dependencies:\n%s\n\n" "$skipped_list"
		echo "Install these programs and re-run the test suite, or run it with the --allow-skip option"
		echo "--------------------"
		exit 1
	fi
fi
